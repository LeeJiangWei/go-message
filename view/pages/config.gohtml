{{ define "pages/config.gohtml" }}
    <!DOCTYPE html>
    <html lang="zh">
    {{ template "partials/header.gohtml" }}
    <script>
        function openTab(element, tabName) {
            let i, x, tablinks;
            x = document.getElementsByClassName("content-tab");
            for (i = 0; i < x.length; i++) {
                x[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tab");
            for (i = 0; i < x.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" is-active", "");
            }
            document.getElementById(tabName).style.display = "block";
            element.className += " is-active";
        }
    </script>
    <body>
    {{ template "partials/navbar.gohtml" }}
    <section class="section">
        <div class="container">
            <h1 class="title">
                配置
            </h1>
        </div>
    </section>
    <section>
        <div class="container">
            {{ template "partials/message.gohtml" }}
            <div class="tabs">
                <ul>
                    <li class="tab is-active" onclick="openTab(this, 'user')">
                        <a>用户信息</a>
                    </li>
                    <li class="tab" onclick="openTab(this, 'app')">
                        <a>微信测试号</a>
                    </li>
                    <li class="tab" onclick="openTab(this, 'corp')">
                        <a>企业微信应用</a>
                    </li>
                </ul>
            </div>
            <form id="user" class="box content-tab" action="/api/user" method="post">
                <div class="field">
                    <label class="label">用户名</label>
                    <div class="control">
                        <input id="userName" class="input" name="name" type="text" placeholder="请输入用户名"
                               value="{{ .User.Name }}">
                    </div>
                </div>
                <div class="field">
                    <label class="label">密码</label>
                    <div class="control">
                        <input id="userPassword" class="input" name="text" type="text" placeholder="未改变">
                    </div>
                </div>
                <div class="field">
                    <label class="label">消息推送 Token</label>
                    <div class="control">
                        <input id="userToken" class="input" name="token" type="text" placeholder="请输入用于推送消息的 Token"
                               value="{{ .User.Token }}">
                    </div>
                </div>
                <div class="field is-grouped is-grouped-right">
                    <div class="control">
                        <input type="submit" class="button is-primary" value="修改">
                    </div>
                    <div class="control">
                        <input type="reset" class="button is-light" value="重置">
                    </div>
                </div>
            </form>
            <form id="app" class="box content-tab" style="display: none" action="/api/app" method="post">
                <div class="field">
                    <label class="label">appID</label>
                    <div class="control">
                        <input id="appAppID" class="input" name="appID" type="text" placeholder="请输入 appID"
                               value="{{ .User.App.AppID}}">
                    </div>
                </div>
                <div class="field">
                    <label class="label">appsecret</label>
                    <div class="control">
                        <input id="appAppSecret" class="input" name="appSecret" type="text"
                               placeholder="请输入 appsecret" value="{{ .User.App.AppSecret }}">
                    </div>
                </div>
                <div class="field">
                    <label class="label">接口配置 Token</label>
                    <div class="control">
                        <input id="appVerifyToken" class="input" name="verifyToken" type="text"
                               placeholder="请输入接口配置 Token" value="{{ .User.App.VerifyToken }}">
                    </div>
                </div>
                <div class="field">
                    <label class="label">模板 ID</label>
                    <div class="control">
                        <input id="appTemplateID" class="input" name="templateID" type="text"
                               placeholder="请输入模板 ID" value="{{ .User.App.TemplateID }}">
                    </div>
                </div>
                <div class="field">
                    <label class="label">接收者 ID</label>
                    <div class="control">
                        <input id="appReceiverID" class="input" name="receiverID" type="text"
                               placeholder="请输入接收者 ID" value="{{ .User.App.ReceiverID }}">
                    </div>
                </div>
                <div class="field is-grouped is-grouped-right">
                    <div class="control">
                        <input type="submit" class="button is-primary" value="修改">
                    </div>
                    <div class="control">
                        <input type="reset" class="button is-light" value="重置">
                    </div>
                </div>
            </form>
            <form id="corp" class="box content-tab" style="display:none;" action="/api/corp" method="post">
                <div class="field">
                    <label class="label">企业 ID</label>
                    <div class="control">
                        <input id="corpCorpID" class="input" name="corpID" type="text"
                               placeholder="请输入企业 ID" value="{{ .User.Corp.CorpID }}">
                    </div>
                </div>
                <div class="field">
                    <label class="label">企业应用 AgentId</label>
                    <div class="control">
                        <input id="corpAgentID" class="input" name="agentID" type="text"
                               placeholder="请输入企业应用 AgentId" value="{{ .User.Corp.AgentID }}">
                    </div>
                </div>
                <div class="field">
                    <label class="label">企业应用 Secret</label>
                    <div class="control">
                        <input id="corpAgentSecret" class="input" name="agentSecret" type="text"
                               placeholder="请输入企业应用 Secret" value="{{ .User.Corp.AgentSecret }}">
                    </div>
                </div>
                <div class="field">
                    <label class="label">接收者 ID</label>
                    <div class="control">
                        <input id="corpReceiverID" class="input" name="receiverID" type="text"
                               placeholder="请输入接收者 ID" value="{{ .User.Corp.ReceiverID }}">
                    </div>
                </div>
                <div class="field">
                    <label class="label">卡片消息默认 URL</label>
                    <div class="control">
                        <input id="corpCardUrl" class="input" name="cardUrl" type="url"
                               placeholder="卡片消息默认 URL" value="{{ .User.Corp.CardUrl }}">
                    </div>
                </div>
                <div class="field is-grouped is-grouped-right">
                    <div class="control">
                        <input type="submit" class="button is-primary" value="修改">
                    </div>
                    <div class="control">
                        <input type="reset" class="button is-light" value="重置">
                    </div>
                </div>
            </form>
        </div>
    </section>
    </body>
    <script>
        showMessage = (text, danger = true) => {
            const message = document.getElementById("message")
            const messageBody = document.getElementById("message-body")
            messageBody.innerText = text
            if (danger) {
                message.className = message.className.replace(" is-success", "")
                message.className += " is-danger"
            } else {
                message.className = message.className.replace(" is-danger", "")
                message.className += " is-success"
            }
            message.style.display = ""
            setTimeout(() => {
                message.style.display = "none"
            }, 5000)
        }

        const {JWT} = JWTStore

        if (JWT === null) {
            showMessage("当前未登录。")
            setTimeout(() => {
                window.location.replace("/login")
            }, 5000)
        }

        document.getElementById("user").onsubmit = async e => {
            e.preventDefault()
            const name = document.getElementById("userName").value
            const pass = document.getElementById("userPassword").value
            const token = document.getElementById("userToken").value

            const formData = new FormData()
            formData.append("name", name)
            formData.append("password", pass)
            formData.append("token", token)

            const response = await fetch("/api/user", {
                method: "POST",
                body: formData,
                headers: {token: JWT}
            })
            const text = await response.text()
            if (response.status === 401) {
                window.localStorage.removeItem("JWT")
                window.location.replace("/login")
            } else if (!response.ok) {
                showMessage(text)
            } else {
                showMessage("Success.", false)
                setTimeout(() => {
                    window.location.replace("/config?token=" + JWT)
                }, 5000)
            }
            return false
        }

        document.getElementById("app").onsubmit = async e => {
            e.preventDefault()
            const appID = document.getElementById("appAppID").value
            const appSecret = document.getElementById("appAppSecret").value
            const verifyToken = document.getElementById("appVerifyToken").value
            const templateID = document.getElementById("appTemplateID").value
            const receiverID = document.getElementById("appReceiverID").value

            const formData = new FormData()
            formData.append("appID", appID)
            formData.append("appSecret", appSecret)
            formData.append("verifyToken", verifyToken)
            formData.append("templateID", templateID)
            formData.append("receiverID", receiverID)

            const response = await fetch("/api/app", {
                method: "POST",
                body: formData,
                headers: {token: JWT}
            })
            const text = await response.text()
            if (response.status === 401) {
                window.localStorage.removeItem("JWT")
                window.location.replace("/login")
            } else if (!response.ok) {
                showMessage(text)
            } else {
                showMessage("Success.", false)
                setTimeout(() => {
                    window.location.replace("/config?token=" + JWT)
                }, 5000)
            }
            return false
        }

        document.getElementById("corp").onsubmit = async e => {
            e.preventDefault()
            const corpID = document.getElementById("corpCorpID").value
            const agentID = document.getElementById("corpAgentID").value
            const agentSecret = document.getElementById("corpAgentSecret").value
            const receiverID = document.getElementById("corpReceiverID").value
            const cardUrl = document.getElementById("corpCardUrl").value

            const formData = new FormData()
            formData.append("corpID", corpID)
            formData.append("agentID", agentID)
            formData.append("agentSecret", agentSecret)
            formData.append("receiverID", receiverID)
            formData.append("cardUrl", cardUrl)

            const response = await fetch("/api/corp", {
                method: "POST",
                body: formData,
                headers: {token: JWT}
            })
            const text = await response.text()
            if (response.status === 401) {
                window.localStorage.removeItem("JWT")
                window.location.replace("/login")
            } else if (!response.ok) {
                showMessage(text)
            } else {
                showMessage("Success.", false)
                setTimeout(() => {
                    window.location.replace("/config?token=" + JWT)
                }, 5000)
            }
            return false
        }
    </script>
    </html>
{{ end }}